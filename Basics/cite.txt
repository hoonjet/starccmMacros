
===========================================================================================================================================================================================================
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from data_raw import getData_byCMH, getData_byDelay

sen01, sen03, sen05, sen10 = getData_byCMH()
delay_0, delay_2, delay_3, delay_5, delay_6, delay_10 = getData_byDelay()



# # Sensor 1: Side
# # Sensor 3: User
# # Sensor 5: Ceiling
# # Sensor 10: Front

# col_names_0CMH = ['Time', 'Front','Side', 'Ceiling','User']


col_names_flowrate = ['Time_0CMH','0CMH','Time_200CMH','200CMH','Time_300CMH','300CMH','Time_400CMH','400CMH','Time_500CMH','500CMH','Time_600CMH','600CMH','Time_70CMH','700CMH','Time_800CMH','800CMH']
col_names_flowrate_03 = ['Time','0CMH','200CMH','300CMH','400CMH','500CMH','600CMH','700CMH','800CMH']

df_01 = pd.DataFrame(sen01,columns = col_names_flowrate)
df_03 = pd.DataFrame(sen03,columns = col_names_flowrate_03)
df_05 = pd.DataFrame(sen05,columns = col_names_flowrate)
df_10 = pd.DataFrame(sen10,columns = col_names_flowrate)
#df_flowrate_list = [df_01,df_03,df_05,df_10]


#===============================================================================
# PM 2.5 without hood operation
plt.plot(df_10['Time_0CMH'], df_10['0CMH'], df_01['Time_0CMH'], df_01['0CMH'], df_05['Time_0CMH'], df_05['0CMH'], df_03['Time'], df_03['0CMH'])
plt.xlabel('Time (s)')
plt.ylabel('PM 2.5 Concentration (μg/m$^3$)')
plt.ylim(0,4000)
plt.legend(['Front', 'Side','Ceiling','User'])
plt.show()
#===============================================================================

#===============================================================================
# PM 2.5 with hood operation - Front
plt.plot(df_10['Time_0CMH'], df_10['0CMH'],df_10['Time_200CMH'], df_10['200CMH'],df_10['Time_400CMH'], df_10['400CMH'],df_10['Time_600CMH'], df_10['600CMH'],df_10['Time_800CMH'], df_10['800CMH'])
plt.xlabel('Time (s)')
plt.ylabel('PM 2.5 Concentration (μg/m$^3$)')
plt.ylim(0,4000)
plt.legend(['0CMH','200CMH','400CMH','600CMH','800CMH'])
# 2837 769 508 341 276
plt.show()

# PM 2.5 with hood operation - Side
plt.plot(df_01['Time_0CMH'], df_01['0CMH'],df_01['Time_200CMH'], df_01['200CMH'],df_01['Time_300CMH'], df_01['300CMH'],df_01['Time_600CMH'], df_01['600CMH'],df_01['Time_800CMH'], df_01['700CMH'])
plt.xlabel('Time (s)')
plt.ylabel('PM 2.5 Concentration (μg/m$^3$)')
plt.ylim(0,4000)
plt.legend(['0CMH','200CMH','400CMH','600CMH','800CMH'])
plt.show()

# PM 2.5 with hood operation - Ceiling
plt.plot(df_05['Time_0CMH'], df_05['0CMH'],df_05['Time_200CMH'], df_05['200CMH'],df_05['Time_500CMH'], df_05['500CMH'],df_05['Time_600CMH'], df_05['600CMH'],df_05['Time_800CMH'], df_05['800CMH'])
plt.xlabel('Time (s)')
plt.ylabel('PM 2.5 Concentration (μg/m$^3$)')
plt.ylim(0,4000)
plt.legend(['0CMH','200CMH','400CMH','600CMH','800CMH'])
plt.show()

# PM 2.5 with hood operation - User
plt.plot(df_03['Time'], df_03['0CMH'],df_03['Time'], df_03['200CMH'],df_03['Time'], df_03['400CMH'],df_03['Time'], df_03['500CMH'],df_03['Time'], df_03['800CMH'])
plt.xlabel('Time (s)')
plt.ylabel('PM 2.5 Concentration (μg/m$^3$)')
plt.ylim(0,4000)
plt.legend(['0CMH','200CMH','400CMH','600CMH','800CMH'])
plt.show()
#===============================================================================

#===============================================================================
# Average PM 2.5 concentration at the ceiling

data_avgPM = np.array([0.1, 1972, 200, 723, 300, 546, 400,509, 500,239, 600, 223, 700, 210, 800,123]).reshape(-1,2)
col_names_avgPM = ['flow', 'PM']
df_avgPM = pd.DataFrame(data_avgPM,columns = col_names_avgPM)

x = data_avgPM[:,0]
y = data_avgPM[:,1]
log_x = np.log(data_avgPM[:,0])
log_y =  np.log(data_avgPM[:,1])
coefficients = np.polyfit(x, log_y,1)
x = np.linspace(0.1 ,800, 80)

fit = coefficients[0]*x + coefficients[1]

plt.scatter(df_avgPM['flow'], df_avgPM['PM'])
plt.plot(x, np.exp(fit),'--')
plt.xlabel('Flow rate (m$^3$/h)')
plt.ylabel('Average PM 2.5 Concentration (μg/m$^3$)')
plt.ylim(0,2000)
plt.xlim(-10,810)

plt.show()
#===============================================================================

print(sen01.shape)


for df in df_flowrate_list:
    ax = df.plot(x='Time', y=['0CMH','200CMH','300CMH','400CMH','500CMH','600CMH','700CMH','800CMH'])    
    ax.set_ylabel('PM 2.5 Concentration (μg/m$^3$)')
    ax.set_ylim(0,4000)
    #print([df.mean(), df.max()])



col_names_hoodDelay = ['Time', 'Sensor01', 'Sensor03', 'Sensor05', 'Sensor10']



df_0min = pd.DataFrame(delay_0,columns = col_names_hoodDelay)
df_2min = pd.DataFrame(delay_2,columns = col_names_hoodDelay)
df_3min = pd.DataFrame(delay_3,columns = col_names_hoodDelay)
df_5min = pd.DataFrame(delay_5,columns = col_names_hoodDelay)
df_6min = pd.DataFrame(delay_6,columns = col_names_hoodDelay)
df_10min = pd.DataFrame(delay_10,columns = col_names_hoodDelay)
df_delay_list = [df_0min,df_2min,df_3min,df_5min,df_6min,df_10min]

plot_vars = ['Sensor10','Sensor01', 'Sensor05', 'Sensor03']

for plot_var in plot_vars:
    plt.plot(df_0min['Time'], df_0min[plot_var],df_2min['Time'], df_2min[plot_var],df_5min['Time'], df_5min[plot_var], df_6min['Time'], df_6min[plot_var],df_3min['Time'], df_3min[plot_var],df_10min['Time'], df_10min[plot_var])
    plt.xlabel('Time (s)')
    plt.ylabel('PM 2.5 Concentration (μg/m$^3$)')
    plt.ylim(0,4000)
    plt.xlim(0,3000)
    plt.legend(['0 min', '2 mins', '3 mins', '5 mins', '6 mins', '10 mins'])
    plt.show()


#===============================================================================
# Average PM 2.5 concentration and recovery (at the ceiling)

data_PM_Recover = np.array([223, 6.2, 377, 8.4, 496, 9.7, 772, 14.2, 951, 18.85, 2242, 39.7 ]).reshape(-1,2)
col_PM_Recover = ['PM', 'minutes']
df_PM_Recover = pd.DataFrame(data_PM_Recover,columns = col_PM_Recover)

x = data_PM_Recover[:,0]
y = data_PM_Recover[:,1]
coefficients = np.polyfit(x, y,1,)
x = np.linspace(0 ,2500, 100)

#0.0183
fit = 0.0183*x

plt.scatter(df_PM_Recover['minutes'], df_PM_Recover['PM'])
plt.plot(fit,x,'--')
plt.ylabel('Average PM 2.5 Concentration (μg/m$^3$)')
plt.xlabel('Recovery Time (minutes)')
plt.ylim(0,2500)
plt.xlim(0,50)

plt.show()
